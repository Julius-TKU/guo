{"version":3,"sources":["utils/post.md","utils/p1.md","utils/p2.md","utils/p3.md","utils/p4.md","serviceWorker.js","utils/actionTypes.tsx","utils/actions.tsx","root/Mdns.tsx","hooks/mdnsApp.tsx","utils/switchAction.jsx","reducers/index.tsx","utils/sendRecv.js","sagas/index.tsx","utils/configureStore.jsx","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","ACTION_TYPES","INIT_MDNS","SET_MDNS","GET_MDNS","initMdns","mdi","type","payload","setMdns","markDownPages","getMdns","Content","Sider","Myblog","useMappedState","state","dispatch","useDispatch","actionCreators","bindActionCreators","useEffect","useMdnsApp","useState","show","nav","setNav","style","minHeight","theme","collapsible","defaultCollapsed","collapsed","onMouseEnter","onMouseLeave","className","onClick","mode","Item","key","AuditOutlined","margin","padding","source","escapeHtml","actionToReducerMap","initMdnsState","actionSwitch","action","reducer","mdnsApp","sendRecv","fetch","post","then","res","text","p1","p2","p3","p4","err","console","log","root","call","mdn","put","actions","error","takeEvery","logger","createLogger","sagaMiddleware","createSagaMiddleware","store","createStore","reducers","compose","applyMiddleware","run","sagas","ReactDOM","render","Provider","value","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.a6bdd078.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/post.09ed90e6.md\";","module.exports = __webpack_public_path__ + \"static/media/p1.95d441e1.md\";","module.exports = __webpack_public_path__ + \"static/media/p2.6df36070.md\";","module.exports = __webpack_public_path__ + \"static/media/p3.a168d156.md\";","module.exports = __webpack_public_path__ + \"static/media/p4.06249f33.md\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const ACTION_TYPES = {\r\n  INIT_MDNS: 'INIT_MDNS',\r\n  SET_MDNS: 'SET_MDNS',\r\n  GET_MDNS: 'GET_MDNS'\r\n}\r\n\r\nexport default ACTION_TYPES","import ACTION_TYPES from './actionTypes'\r\nimport { Action } from 'redux'\r\n\r\nexport interface InitMdnsAction extends Action<string> {\r\n  type: string\r\n  payload: {\r\n    mdi: string\r\n  }\r\n}\r\n\r\nexport function initMdns(mdi: string): InitMdnsAction {\r\n  return {\r\n    type: ACTION_TYPES.INIT_MDNS,\r\n    payload: { mdi }\r\n  }\r\n}\r\n\r\nexport interface SetMdnsAction extends Action<string> {\r\n  type: string\r\n  payload: {\r\n    markDownPages: string\r\n  }\r\n}\r\n\r\nexport function setMdns(markDownPages: string): SetMdnsAction {\r\n  return {\r\n    type: ACTION_TYPES.SET_MDNS,\r\n    payload: { markDownPages }\r\n  }\r\n}\r\n\r\nexport interface GetMdnsAction extends Action<string> {\r\n  type: string\r\n  payload: {\r\n    mdi: string\r\n  }\r\n}\r\n\r\nexport function getMdns(mdi: string): GetMdnsAction {\r\n  return {\r\n    type: ACTION_TYPES.GET_MDNS,\r\n    payload: { mdi }\r\n  }\r\n}","import React, { ReactElement, useState } from 'react'\r\nimport { Layout, Menu, Affix, ConfigProvider } from 'antd';\r\nimport { AuditOutlined } from '@ant-design/icons'\r\nimport { useMdnsApp } from '../hooks/mdnsApp'\r\nimport ReactMarkdown from 'react-markdown'\r\nimport QueueAnim from 'rc-queue-anim'\r\nimport '../utils/mdns.css'\r\n\r\nconst { Content, Sider } = Layout;\r\n\r\nexport default function Myblog(): ReactElement {\r\n  const { markDownPages, getMdns } = useMdnsApp()\r\n  const [show, setShow] = useState(true)\r\n  const [nav, setNav] = useState(true)\r\n\r\n  return (\r\n    <>\r\n      <ConfigProvider>\r\n        <Layout style={{ minHeight: '100vh' }} >\r\n          <Sider\r\n            theme='dark'\r\n            collapsible={true}\r\n            defaultCollapsed={true}\r\n            collapsed={nav}\r\n            onMouseEnter={() => setNav(false)} onMouseLeave={() => setNav(true)}\r\n          >\r\n            <div className=\"logo\" onClick={() => getMdns('post')}/>\r\n            <Affix>\r\n              <Menu theme='dark' mode=\"inline\">\r\n                <Menu.Item key=\"1\" onClick={() => getMdns('p1')}>\r\n                  <AuditOutlined />\r\n                  <span>個人資料</span>\r\n                </Menu.Item>\r\n                <Menu.Item key=\"2\" onClick={() => getMdns('p2')}>\r\n                  <AuditOutlined />\r\n                  <span>榮譽事項</span>\r\n                </Menu.Item>\r\n                <Menu.Item key=\"3\" onClick={() => getMdns('p3')}>\r\n                  <AuditOutlined />\r\n                  <span>研究成果</span>\r\n                </Menu.Item>\r\n                <Menu.Item key=\"4\" onClick={() => getMdns('p4')}>\r\n                  <AuditOutlined />\r\n                  <span>研究計畫</span>\r\n                </Menu.Item>\r\n              </Menu>\r\n            </Affix>\r\n          </Sider>\r\n          <Layout>\r\n            {show ? [\r\n              <QueueAnim className=\"demo-content\">\r\n                <Content className=\"demo-thead\" key=\"a\" style={{ margin: '0 16px' }}>\r\n                  <div style={{ padding: 24, minHeight: 360 }}>\r\n                    <ReactMarkdown source={markDownPages} escapeHtml={true} />\r\n                  </div>\r\n                </Content>\r\n              </QueueAnim>\r\n            ] : null}\r\n          </Layout>\r\n        </Layout>\r\n      </ConfigProvider>\r\n    </>\r\n  )\r\n}\r\n","import { useEffect } from 'react'\r\nimport { useDispatch, useMappedState } from 'redux-react-hook'\r\nimport { MdnsAppState } from '../reducers'\r\nimport { initMdns, getMdns } from '../utils/actions'\r\nimport { bindActionCreators } from 'redux'\r\n\r\nexport function useMdnsApp(): {\r\n  markDownPages: any\r\n  initMdns: (mdi: string) => void\r\n  getMdns: (mdi: string) => void\r\n} {\r\n  const state = useMappedState(state => state)\r\n  const { markDownPages }: MdnsAppState = state\r\n  const dispatch = useDispatch()\r\n\r\n  const actionCreators = bindActionCreators({ initMdns, getMdns }, dispatch)\r\n\r\n  useEffect(() => { actionCreators.initMdns('post') }, [])\r\n\r\n  return { markDownPages, ...actionCreators}\r\n}","/**\r\n * https://github.com/qwtel/redux-switch-action\r\n * ↑參考來源\r\n */\r\nexport default (actionToReducerMap) => {\r\n  return function switchAction (state, action = {}) {\r\n    const reducer = actionToReducerMap[action.type]\r\n\r\n    return reducer\r\n      ? reducer(state, action)\r\n      : state\r\n  }\r\n}","import ACTION_TYPES from '../utils/actionTypes'\r\nimport { Reducer } from 'redux'\r\nimport * as actions from '../utils/actions'\r\nimport createSwitch from '../utils/switchAction'\r\n\r\nexport interface MdnsAppState {\r\n  markDownPages: any\r\n}\r\n\r\nexport const defaultMdnsData: MdnsAppState = { markDownPages: '' }\r\n\r\nconst initMdnsState: MdnsAppState = {\r\n  markDownPages: ''\r\n}\r\n\r\nconst setMdns = (state: MdnsAppState, { payload }: actions.SetMdnsAction): MdnsAppState => {\r\n  const { markDownPages } = payload\r\n  return {\r\n    ...state,\r\n    markDownPages: markDownPages\r\n  }\r\n}\r\n\r\nconst actionSwitch = createSwitch({\r\n  [ACTION_TYPES.SET_MDNS]: setMdns\r\n})\r\n\r\nconst mdnsApp: Reducer<MdnsAppState> = (state: MdnsAppState = initMdnsState, action: any): MdnsAppState => actionSwitch(state, action)\r\n\r\nexport default mdnsApp","import post from './post.md';\r\nimport p1 from './p1.md';\r\nimport p2 from './p2.md';\r\nimport p3 from './p3.md';\r\nimport p4 from './p4.md';\r\n\r\nexport default function sendRecv(mdi) {\r\n  try {\r\n    if (mdi === 'post') {\r\n      const result = window.fetch(post).then(res => res.text())\r\n      const mds = result\r\n      return mds\r\n    } else if (mdi === 'p1') {\r\n      const result = window.fetch(p1).then(res => res.text())\r\n      const mds = result\r\n      return mds\r\n    }\r\n    else if (mdi === 'p2') {\r\n      const result = window.fetch(p2).then(res => res.text())\r\n      const mds = result\r\n      return mds\r\n    }\r\n    else if (mdi === 'p3') {\r\n      const result = window.fetch(p3).then(res => res.text())\r\n      const mds = result\r\n      return mds\r\n    }\r\n    else if (mdi === 'p4') {\r\n      const result = window.fetch(p4).then(res => res.text())\r\n      const mds = result\r\n      return mds\r\n    }\r\n  } catch (err) {\r\n    console.log(err)\r\n  }\r\n}","import { SagaIterator } from 'redux-saga'\r\nimport ACTION_TYPES from '../utils/actionTypes'\r\nimport * as actions from '../utils/actions'\r\nimport { put, call, takeEvery } from 'redux-saga/effects'\r\nimport sendRecv from '../utils/sendRecv'\r\n\r\nfunction* initMdns({ payload }: actions.InitMdnsAction): SagaIterator {\r\n  try {\r\n    const mdn = yield call(sendRecv, payload.mdi)\r\n    yield put(actions.setMdns(mdn))\r\n  } catch (err) {\r\n    console.error(err)\r\n  }\r\n}\r\n\r\nfunction* getMdns({ payload }: actions.GetMdnsAction): SagaIterator {\r\n  try {\r\n    const mdn = yield call(sendRecv, payload.mdi)\r\n    yield put(actions.setMdns(mdn))\r\n  } catch (err) {\r\n    console.error(err)\r\n  }\r\n}\r\n\r\nexport default function* root(): SagaIterator {\r\n  yield takeEvery(ACTION_TYPES.INIT_MDNS, initMdns)\r\n  yield takeEvery(ACTION_TYPES.GET_MDNS, getMdns)\r\n}\r\n","import { createStore, applyMiddleware, compose } from 'redux'\r\nimport { createLogger } from 'redux-logger'\r\nimport createSagaMiddleware from 'redux-saga'\r\nimport reducers from '../reducers'\r\nimport sagas from '../sagas'\r\n\r\nconst logger = createLogger()\r\nconst sagaMiddleware = createSagaMiddleware()\r\n\r\nconst store = createStore(\r\n  reducers,\r\n  compose(\r\n    applyMiddleware(logger),\r\n    applyMiddleware(sagaMiddleware)\r\n  )\r\n)\r\n\r\nsagaMiddleware.run(sagas)\r\n\r\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport Mdns from './root/Mdns'\nimport { Provider } from 'react-redux'\nimport { StoreContext } from 'redux-react-hook';\nimport store from './utils/configureStore'\n\nReactDOM.render(\n  <Provider store={store}>\n    <StoreContext.Provider value={store}>\n      <Mdns />\n    </StoreContext.Provider>\n  </Provider>\n  , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}